//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ConsoleClient.ServiceReference1 {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Temperature", Namespace="http://schemas.datacontract.org/2004/07/TemperatureService")]
    [System.SerializableAttribute()]
    public partial class Temperature : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double CelsiusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double FahrenheitField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Celsius {
            get {
                return this.CelsiusField;
            }
            set {
                if ((this.CelsiusField.Equals(value) != true)) {
                    this.CelsiusField = value;
                    this.RaisePropertyChanged("Celsius");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Fahrenheit {
            get {
                return this.FahrenheitField;
            }
            set {
                if ((this.FahrenheitField.Equals(value) != true)) {
                    this.FahrenheitField = value;
                    this.RaisePropertyChanged("Fahrenheit");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.ITemperatureCalc")]
    public interface ITemperatureCalc {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITemperatureCalc/GetCelsius", ReplyAction="http://tempuri.org/ITemperatureCalc/GetCelsiusResponse")]
        double GetCelsius(ConsoleClient.ServiceReference1.Temperature temp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITemperatureCalc/GetCelsius", ReplyAction="http://tempuri.org/ITemperatureCalc/GetCelsiusResponse")]
        System.Threading.Tasks.Task<double> GetCelsiusAsync(ConsoleClient.ServiceReference1.Temperature temp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITemperatureCalc/GetFahrenheit", ReplyAction="http://tempuri.org/ITemperatureCalc/GetFahrenheitResponse")]
        double GetFahrenheit(ConsoleClient.ServiceReference1.Temperature temp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITemperatureCalc/GetFahrenheit", ReplyAction="http://tempuri.org/ITemperatureCalc/GetFahrenheitResponse")]
        System.Threading.Tasks.Task<double> GetFahrenheitAsync(ConsoleClient.ServiceReference1.Temperature temp);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ITemperatureCalcChannel : ConsoleClient.ServiceReference1.ITemperatureCalc, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TemperatureCalcClient : System.ServiceModel.ClientBase<ConsoleClient.ServiceReference1.ITemperatureCalc>, ConsoleClient.ServiceReference1.ITemperatureCalc {
        
        public TemperatureCalcClient() {
        }
        
        public TemperatureCalcClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public TemperatureCalcClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TemperatureCalcClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TemperatureCalcClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public double GetCelsius(ConsoleClient.ServiceReference1.Temperature temp) {
            return base.Channel.GetCelsius(temp);
        }
        
        public System.Threading.Tasks.Task<double> GetCelsiusAsync(ConsoleClient.ServiceReference1.Temperature temp) {
            return base.Channel.GetCelsiusAsync(temp);
        }
        
        public double GetFahrenheit(ConsoleClient.ServiceReference1.Temperature temp) {
            return base.Channel.GetFahrenheit(temp);
        }
        
        public System.Threading.Tasks.Task<double> GetFahrenheitAsync(ConsoleClient.ServiceReference1.Temperature temp) {
            return base.Channel.GetFahrenheitAsync(temp);
        }
    }
}
